<div id="sourceManagement" class="tab" style="display: block">
  <h2>This will display a source management page.</h2>
  <p>
    Here the user will turn sources on or off, and add or remove data sources.
  </p>
  <hr />

  <div class="grid-container">
    <!-- Optional Header/Title -->
    <div class="header">Node Location</div>

    <!-- Main Switch and Square Switches -->
    <div class="main-switch" style="grid-column: span 3">
      <label>SERVER MODE</label>
      <div class="switch-value">
        <label class="switch">
          <input id="mode" type="checkbox" />
          <span class="slider"></span>
        </label>
        <span id="modeValue"> - </span>
      </div>
    </div>

    <!-- Labels and Switches for Rows -->
    <div class="row">
      <label>GOES Files</label>
      <div class="ternary-toggle">
        <input type="radio" id="state1" name="radios" value="off" />
        <label for="state1">Off</label>

        <input type="radio" id="state2" name="radios" value="local" checked />
        <label for="state2">Local</label>

        <input type="radio" id="state3" name="radios" value="State 3" />
        <label for="state3">Direct</label>
      </div>
    </div>

    <div class="row">
      <label>Label 2</label>
      <label class="switch">
        <input type="checkbox" />
        <span class="slider round"></span>
      </label>
    </div>

    <div class="row">
      <label>Label 3</label>
      <label class="switch">
        <input type="checkbox" />
        <span class="slider round"></span>
      </label>
    </div>

    <!-- Section 2 -->
    <div class="header">Section 2</div>

    <!-- Main Switch and Square Switches -->
    <div class="main-switch" style="grid-column: span 2">
      <label>Main Switch Label</label>
      <label class="switch">
        <input type="checkbox" checked />
        <span class="slider"></span>
      </label>
    </div>

    <div class="main-switch">
      <label>Main Switch Label</label>
      <label class="switch">
        <input type="checkbox" />
        <span class="slider"></span>
      </label>
    </div>

    <!-- Labels and Switches for Rows -->
    <div class="row">
      <label>Label 1</label>
      <label class="switch">
        <input type="checkbox" />
        <span class="slider round"></span>
      </label>
    </div>

    <div class="row">
      <label>Label 2</label>
      <label class="switch">
        <input type="checkbox" />
        <span class="slider round"></span>
      </label>
    </div>

    <div class="row">
      <label>Label 3</label>
      <label class="switch">
        <input type="checkbox" />
        <span class="slider round"></span>
      </label>
    </div>

    <!-- Repeat the row structure for other rows -->
  </div>
  <hr />
  <table id="data-table">
    <thead>
      <tr>
        <th>Name</th>
        <th>Lan Location</th>
        <th>Remote Location</th>
        <th>Local Folder</th>
        <th>Set To</th>
      </tr>
    </thead>
    <tbody>
      <!-- Data will be populated here -->
    </tbody>
  </table>
  <!-- <script>
    // Get the mode checkbox and modeValue span elements
    const modeCheckbox = document.getElementById("mode");
    const modeValueSpan = document.getElementById("modeValue");

    // Listen for changes to the mode checkbox
    modeCheckbox.addEventListener("change", function () {
      // Update the modeValue span with the current mode
      modeValueSpan.textContent = this.checked ? "REMOTE" : "LAN";
    });
  </script> -->
  <script>
    let config;
    document.addEventListener("DOMContentLoaded", () => {
      // Fetch data from the server
      fetch("./data/config")
        .then((response) => response.json())
        .then((data) => {
          config = data;
          console.log(config);
          // Assume you have fetched the mode from the server and stored it in a variable.
          const currentMode = config.mode; // Replace this with the actual fetched mode.
          const modeValueSpan = document.getElementById("modeValue");
          const modeCheckbox = document.getElementById("mode");

          // Set the initial value of the modeValue span
          modeValueSpan.textContent = currentMode;

          // Listen for changes to the mode checkbox
          modeCheckbox.addEventListener("change", function () {
            // Update the modeValue span based on the checkbox state
            modeValueSpan.textContent = this.checked ? "REMOTE" : "LAN";
          });

          const dataTable = document
            .getElementById("data-table")
            .querySelector("tbody");

          // Loop through the data and create table rows
          config.sources.forEach((source) => {
            const row = document.createElement("tr");
            row.innerHTML = `
                        <td>${source.name}</td>
                        <td>${source.lanLocation}</td>
                        <td>${source.remoteLocation}</td>
                        <td>${source.localFolder}</td>
                        <td>${source.setTo}</td>
                    `;
            dataTable.appendChild(row);
          });
        })
        .catch((error) => {
          console.error("Error fetching data:", error);
        });
    });
  </script>
</div>
