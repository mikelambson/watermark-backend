generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["config", "auth",  "master", "maint", "ops", "analysis", "public", "timeseries"]
  extensions = [pgcrypto]
}

//////////////////// Auth ////////////////////
model Users {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login        String   @unique @db.VarChar
  password     String   @db.VarChar
  fullname     String?  @db.VarChar
  email        String?  @db.VarChar
  title        String?  @default("user") @db.VarChar
  tcid_staff   Boolean? @default(false)
  protected    Boolean  @default(false)
  active       Boolean  @default(true)
  roleId       UserRoles[]
  callout      Callouts[]

  @@schema("auth")
}

model Roles {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar
  users       UserRoles[]
  
  @@schema("auth")
}

model UserRoles {
  user        Users @relation(fields: [userId], references: [id])
  userId      String @db.Uuid
  role        Roles @relation(fields: [roleId], references: [id])
  roleId      String @db.Uuid
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, roleId])

  @@schema("auth")
}

//////////////////// Timeseries ////////////////////
model Orders {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderTimestamp  DateTime @db.Timestamptz(3)
  orderNumber     Int
  tcidSn          String?
  district        String?
  status          String?
  laterals        String[]
  approxCfs       Float?
  approxHrs       Float?
  phoneNumbers    String[]
  remarks         String?
  details         Json? @db.JsonB

  //Relations
  schedule        Schedule[]

  //Indexes
  @@index([orderTimestamp], type:Brin, name: "order_timestamp_index")
  @@index([status], type: Hash, name: "status_index")
  @@index([orderNumber], type: Hash, name: "order_number_index")
  @@index([tcidSn], type: Hash, name: "tcid_sn_index")
  @@index([orderNumber, orderTimestamp], type:Brin , name: "order_number_timestamp_index")
  @@index([status, orderTimestamp], type:Brin , name: "order_status_timestamp_index")
  
// SQL Schema Setup
  @@schema("timeseries")
  @@unique([orderTimestamp, orderNumber])
}

//////////////////// Ops ////////////////////
model Schedule {
  scheduledDate       DateTime? @db.Timestamptz(3)
  scheduledLineId     Int @default(0)
  scheduledHead       Int?
  travelTime          Float @default(0)
  instructions        String?
  watermasterNote     Json?
  specialRequest      String?
  cancelled           Boolean @default(false)
  cancelReason        String?
  orderId             String @db.Uuid

  //Relations
  order               Orders @relation(fields: [orderId], references: [id])
  scheduledLine       HeadSheets @relation(fields: [scheduledLineId], references: [id])
  callout             Callouts[]
  deliveries          Deliveries[]
  analysis            OrderAnalysis[]

  @@id([orderId])
  
  //Indexs
  @@index([scheduledDate], type:Brin, name: "schedule_date_index")
  
  //Schema
  @@schema("ops")
}

model Callouts {
  id                  Int @id @default(autoincrement())
  callout             Boolean? @default(false)
  calloutDone         DateTime?
  calloutUser         String @db.Uuid
  scheduleId          String @db.Uuid 

  schedule            Schedule @relation(fields: [scheduleId], references: [orderId])
  user                Users @relation(fields: [calloutUser], references: [id])

  @@schema("ops")
}

model Deliveries {
  id                String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId           Int
  startTime         DateTime?
  stopTime          DateTime?
  deliveryNote      String?
  scheduleId        String @db.Uuid

  schedule          Schedule @relation(fields: [scheduleId], references: [orderId])
  measurement       Measurements[]

  @@schema("ops")
}

model Measurements {
  id                String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startTime         DateTime
  stopTime          DateTime?
  measurement       Int
  measurementType   String @default("estimation")
  measurementNote   String?
  deliveryId        String @db.Uuid

  scheduledOrder    Deliveries @relation(fields: [deliveryId], references: [id])

  @@schema("ops")
}

model OperationalFlows {
  id                Int @id @default(autoincrement())
  name              String
  type              String
  remoteSource      String?
  remoteValue       Float?
  remoteTimestamp   DateTime?
  override          Boolean @default(false)
  manualValue       Float?
  manualTimestamp   DateTime?

  @@schema("ops")
}

model HeadSheets {
  id              Int @id @default(autoincrement())
  name            String
  district        String
  maxHeads        Int
  structureRef    String?
  maxFlow         Int?
  characteristics Json?
  schedules       Schedule[]

  @@schema("ops")

}

//////////////////// Analysis ////////////////////
model OrderAnalysis {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startTime         DateTime
  stopTime          DateTime
  cfs               Float
  af                Float
  analysisNote      String
  scheduleId        String @db.Uuid
  
  schedule          Schedule @relation(fields: [scheduleId], references: [orderId])
  
  @@schema("analysis")
}

