generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["config", "auth",  "master", "maint", "ops", "analysis", "public", "timeseries"]
  extensions = [pgcrypto, timescaledb] //must install timescaledb & postgis to include
}

//////////////////// Auth ////////////////////
model Users {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login        String   @unique @db.VarChar
  password     String   @db.VarChar
  fullname     String?  @db.VarChar
  email        String?  @db.VarChar
  title        String?  @default("user") @db.VarChar
  tcid_staff   Boolean? @default(false)
  protected    Boolean  @default(false)
  active       Boolean  @default(true)
  roleId       UserRoles[]
  callout      Callouts[]

  @@schema("auth")
  TwoFactorAuth TwoFactorAuth[]
  LdapAuth LdapAuth[]
  ActiveSessions ActiveSessions[]
  PasswordResets PasswordResets[]
  AuthAuditLogs AuthAuditLogs[]
}

model Roles {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @unique @db.VarChar
  protected     Boolean   @default(false)
  superAdmin    Boolean   @default(false)
  requiresLDAP  Boolean   @default(false) // LDAP requirement flag
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(3)
  
  users         UserRoles[]
  @@schema("auth")
}

model UserRoles {
  user        Users @relation(fields: [userId], references: [id])
  userId      String @db.Uuid
  role        Roles @relation(fields: [roleId], references: [id])
  roleId      String @db.Uuid
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, roleId])

  @@schema("auth")
}

model TwoFactorAuth {
  id           String          @id @default(cuid()) // Unique ID for each 2FA entry
  userid       String          @db.Uuid
  method       String          // Enum for 2FA method type
  value        String          // TOTP code, SMS code, etc.
  backupCodes  String[]        // Array of backup codes
  createdAt    DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime        @updatedAt @db.Timestamptz(3)
  user         Users           @relation(fields: [userid], references: [id])

  @@index([userid, createdAt])
  @@schema("auth")
}

model LdapAuth {
  id           String    @id @default(cuid()) // Unique ID for each LDAP entry
  userid       String    @db.Uuid // Reference to Users table
  ldapUrl      String    // LDAP server URL
  baseDn       String    // Base DN for user lookup
  bindDn       String    // Bind DN for authenticating the application
  ldapUsername String    // LDAP username for the specific user
  ldapPassword String    // Encrypted password (if needed)
  status       String    // Active, Disabled, etc.
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
  user         Users     @relation(fields: [userid], references: [id])

  @@index([userid, ldapUsername])
  @@schema("auth")
}

model ActiveSessions {
  id            String    @id @default(cuid())   // Unique session ID
  userId        String    @db.Uuid               // Reference to the user's ID
  userAgent     String?                           // Information about the device/browser used
  ipAddress     String?                           // IP address of the user
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)  // Session start time
  expiresAt     DateTime? @db.Timestamptz(3)     // Optional session expiration time
  isActive      Boolean   @default(true)         // Flag to mark if the session is currently active

  user          Users     @relation(fields: [userId], references: [id])  // Link to Users table

  @@index([userId, createdAt])
  @@schema("auth")
}



//////////////////// Timeseries ////////////////////
model Orders {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderTimestamp  DateTime @db.Timestamptz(3)
  orderNumber     Int
  tcidSn          String?
  district        String?
  status          String?
  laterals        String[]
  approxCfs       Float?
  approxHrs       Float?
  phoneNumbers    String[]
  remarks         String?
  details         Json? @db.JsonB

  //Relations
  schedule        Schedule[]

  //Indexes
  @@index([orderTimestamp], type:Brin, name: "order_timestamp_index")
  @@index([status], type: Hash, name: "status_index")
  @@index([orderNumber], type: Hash, name: "order_number_index")
  @@index([tcidSn], type: Hash, name: "tcid_sn_index")
  @@index([orderNumber, orderTimestamp], type:Brin , name: "order_number_timestamp_index")
  @@index([status, orderTimestamp], type:Brin , name: "order_status_timestamp_index")
  
// SQL Schema Setup
  @@schema("timeseries")
  @@unique([orderTimestamp, orderNumber])
}

model logs {
  id          String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  time        DateTime @default(now()) @db.Timestamptz(3)
  changes     Json     @db.JsonB

  @@id([time, id])
  @@schema("timeseries")
}

model PasswordResets {
  id          String    @id @default(cuid())   // Unique ID for each reset request
  userId      String    @db.Uuid               // Reference to the user's ID
  resetToken  String    @unique                // Unique token for the password reset
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)  // Timestamp of request created
  expiresAt   DateTime  @db.Timestamptz(3)     // Timestamp when the token expires
  usedAt      DateTime? @db.Timestamptz(3)     // Optional timestamp when the token was used

  user        Users     @relation(fields: [userId], references: [id])  // Link to Users table

  @@index([userId, createdAt])
  @@schema("timeseries")
}

model AuthAuditLogs {
  id          String    @id @default(cuid())   // Unique ID for each audit log entry
  userId      String    @db.Uuid               // Reference to the user's ID
  action      String                            // Description of the action performed
  details     Json?   @db.JsonB                // Optional field for additional details
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)  // Timestamp of the log entry

  user        Users     @relation(fields: [userId], references: [id])  // Link to Users table

  @@index([userId, createdAt])
  @@schema("timeseries")
}


//////////////////// Ops ////////////////////
model Schedule {
  scheduledDate       DateTime? @db.Timestamptz(3)
  scheduledLineId     Int @default(0)
  scheduledHead       Int?
  travelTime          Float @default(0)
  instructions        String?
  watermasterNote     Json?
  specialRequest      String?
  cancelled           Boolean @default(false)
  cancelReason        String?
  orderId             String @db.Uuid
  createdAt           DateTime @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime @updatedAt @db.Timestamptz(3)

  //Relations
  order               Orders @relation(fields: [orderId], references: [id])
  scheduledLine       HeadSheets @relation(fields: [scheduledLineId], references: [id])
  callout             Callouts[]
  deliveries          Deliveries[]
  analysis            OrderAnalysis[]

  @@id([orderId])
  
  //Indexs
  @@index([scheduledDate], type:Brin, name: "schedule_date_index")
  
  //Schema
  @@schema("ops")
}

model Callouts {
  id                  Int @id @default(autoincrement())
  callout             Boolean? @default(false)
  calloutDone         DateTime? @db.Timestamptz(3)
  calloutUser         String @db.Uuid
  scheduleId          String @db.Uuid
  createdAt           DateTime @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime @updatedAt @db.Timestamptz(3) 

  schedule            Schedule @relation(fields: [scheduleId], references: [orderId])
  user                Users @relation(fields: [calloutUser], references: [id])

  @@schema("ops")
}

model Deliveries {
  id                String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId           Int
  startTime         DateTime?
  stopTime          DateTime?
  deliveryNote      String?
  scheduleId        String @db.Uuid
  createdAt         DateTime @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime @updatedAt @db.Timestamptz(3)

  schedule          Schedule @relation(fields: [scheduleId], references: [orderId])
  measurement       Measurements[]

  @@schema("ops")
}

model Measurements {
  id                String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startTime         DateTime
  stopTime          DateTime?
  measurement       Int
  measurementType   String @default("estimation")
  measurementNote   String?
  deliveryId        String @db.Uuid
  createdAt         DateTime @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime @updatedAt @db.Timestamptz(3)

  scheduledOrder    Deliveries @relation(fields: [deliveryId], references: [id])

  @@schema("ops")
}

model OperationalFlows {
  id                Int @id @default(autoincrement())
  name              String
  type              String
  remoteSource      String?
  remoteValue       Float?
  remoteTimestamp   DateTime?
  override          Boolean @default(false)
  manualValue       Float?
  manualTimestamp   DateTime?
  createdAt         DateTime @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime @updatedAt @db.Timestamptz(3)
  updatedBy         String?
  @@schema("ops")
}

model HeadSheets {
  id              Int @id @default(autoincrement())
  name            String
  district        String
  maxHeads        Int
  structureRef    String?
  maxFlow         Int?
  characteristics Json?
  createdAt       DateTime @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime @updatedAt @db.Timestamptz(3)

  schedules       Schedule[]

  @@schema("ops")

}

//////////////////// Analysis ////////////////////
model OrderAnalysis {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startTime         DateTime
  stopTime          DateTime
  cfs               Float
  af                Float
  analysisNote      String
  scheduleId        String @db.Uuid
  
  schedule          Schedule @relation(fields: [scheduleId], references: [orderId])
  
  @@schema("analysis")
}

